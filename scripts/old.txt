
class ArucoInquirer:
    def __init__(self):
        self.CAMERA_MATR=np.ndarray
        self.CAMERA_DIST_COEFF=np.ndarray
        self.CAMERA_FOCAL_LEN=np.ndarray

        self.aruco_topic='/aruco_poses'
        self.aruco_topic='/camera_image/image_raw'
        self.aruco_sub=rospy.Subscriber(self.aruco_topic,ArucoPoses,self.foundMarkersCalback)

    def foundMarkersCalback(self,aruco_msg):
        print(aruco_msg)




class MarkerDetector:
    def __init__(self,camera_matrix,camera_dist_coeff,camera_focal_len):
    # def __init__(self) -> None:

        self.MAX_VISIBLE_MARKERS=14
        self.detected_markers_count=0        
        self.bridge_topic='aruco_bridge_opencv'
        self.markers_topic='?'
        self.input_topic="/camera_image/image_raw"
        INPUT_TIMER_CLOCK=rospy.Duration(nsecs=1E7)
        self.bridge_pub = rospy.Publisher(self.bridge_topic, bridge_msg, queue_size=1)
        # self.markers_pub=rospy.Publisher(self.markers_topic,Float32MultiArray,queue_size=self.MAX_VISIBLE_MARKERS)
        self.input_sub=rospy.Subscriber(self.input_topic,Image,self.cameraCallback,queue_size=1)
        # self.input_timer=rospy.Timer(INPUT_TIMER_CLOCK,self.cameraTimerCallback)
        self.do_exit=False

        self.ARUCO_PARAMS = aruco.DetectorParameters_create()


        self.supported_aruco_dicts={ 'original':aruco.DICT_ARUCO_ORIGINAL
                                    ,'51000':aruco.DICT_5X5_1000
                                    ,'61000':aruco.DICT_6X6_1000
                                    ,'71000':aruco.DICT_7X7_1000
                                    }

        self.DEFAULT_SELECTED_DICT='original'
        self.loadArucoDict(self.DEFAULT_SELECTED_DICT)
        # current topic /camera_image/camera_info
        # self.loadCameraParams()
        self.CAMERA_MATR=camera_matrix
        self.CAMERA_DISTORSION_COEFS=camera_dist_coeff
        self.CAMERA_FOCAL_LEN=camera_focal_len
        self.loadTargets()

        self.CAMERA_MATR=np.ndarray
        self.CAMERA_DISTORSION_COEFS=np.ndarray
        self.CAMERA_FOCAL_LEN=np.ndarray
        self.target_id=int
        self.target_size=float
        self.cvbridge=CvBridge()


    def loadArucoDict(self,dict_name):
        """
        load data relatively to selected dictionary
        :param dict_name: string identifying name of dictionary;
                            as in self.supported_aruco_dicts
        """
        requested_dict=self.supported_aruco_dicts[dict_name]
        self.ARUCO_DICT=aruco.Dictionary_get(requested_dict)
    

    def loadCameraParams(self):#,camera_name):
        """
        load intrinsecal parameters of the camera
        params will be retrieved from camera_name/camera_info topic
        NOTE: no callback since it is supposed that params won't change in 

        :param camera_name: string identifying camera name;
                            must appear in the published ones
        """
        # print('loading intrinsecal params from camera: {}'.format(camera_name))
        # info_topic=camera_name+"/camera_info

        info_topic='/camera_image/camera_info'
        rospy.wait_for_message('/camera_image/image_raw',Image)
        print(info_topic)
        info_msg=rospy.wait_for_message(info_topic,CameraInfo)
        print('PORCA MADONNA')
        self.CAMERA_MATR=np.reshape(info_msg.K,[3,3])
        self.CAMERA_DISTORSION_COEFS=info_msg.D
        self.CAMERA_FOCAL_LEN=np.mean([np.ravel(self.CAMERA_MATR[0])[0],np.ravel(self.CAMERA_MATR[1])[1]])


    def loadTargets(self):
        '''
        load full list of all targets available
        as for now hardocoded in a dict
        '''
        #TODO: what about subs aruco.DICT... name with my convention 'original'
        # https://stackoverflow.com/questions/8023306/get-key-by-value-in-dictionary?answertab=trending#tab-top
        # list(mydict.keys())[list(mydict.values()).index(16)])
        # above works with NOT nested dicts
        #  must find a way to extract 'size' value from the relative id value
        self.TARGETS=[  [1,50],
                        [2,50],
                        [3,50],
                        [4,50],
                        [5,50],
                        [6,50],
                        [7,50],
                        [8,50],
                        [9,50],
                        [10,40],
                        [11,50],
                        [12,50],
                        [13,40],
                        [14,50]]
                    # {'button 1':         {'id':1,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'button 2':         {'id':2,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'button 3':         {'id':3,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'button 4':         {'id':4,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'button 5':         {'id':5,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'button 6':         {'id':6,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'button 7':         {'id':7,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'button 8':         {'id':8,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'button 9':         {'id':9,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'imu':              {'id':10,'size':40,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'imu storage':      {'id':11,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'inspection panel': {'id':9,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'lid':              {'id':9,'size':40,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL},
                    #   'lid storage':      {'id':9,'size':50,'aruco_dict':aruco.DICT_ARUCO_ORIGINAL}
                    #   }

    def cameraTimerCallback(self,_):
        '''
        input callback in a timer fashion
        pro: frequency defined
        con: must use rospy.wait_for_msg
        '''
        print('hi')
 

    def cameraCallback(self,img_msg):

        global aruco_success
        global msgVector
        global msgRotMatrix
        global targetCounter
        global findNewTarget
        global remaining_targets
        global bool_exit
        def getMarkerSizeFromId(target_list,target_id):
            '''
            returns the marker size passing target marker id and list of all markers
            '''
            for current_id,current_size in target_list:
                if current_id==target_id: return current_size

        try:
            camera_img=self.cvbridge.imgmsg_to_cv2(img_msg, desired_encoding='passthrough')
            camera_grey=cv2.cvtColor(camera_img,cv2.COLOR_RGB2GRAY)
            
            detected_corners, detected_ids, _ = aruco.detectMarkers(camera_grey, self.ARUCO_DICT, parameters=self.ARUCO_PARAMS)
               
            if detected_ids is not None and len(detected_ids) >= 1: # Check if at least one marker has been found
                
                aruco_img = aruco.drawDetectedMarkers(camera_img.copy(), detected_corners, borderColor=(0, 255, 0))
                
                for marker_id, marker_points in zip(detected_ids, detected_corners):
                    marker_size=getMarkerSizeFromId(self.TARGETS,marker_id)
                    aruco_img,aruco_distance_mm,homo_trans_matr=singleAruRelPos(aruco_img,marker_points,marker_id,marker_size,
                                                self.CAMERA_MATR,self.CAMERA_DISTORSION_COEFS,tglDrawMark=1)
                    
                    
                    
                    
                    aruco_img,aruco_distance_mm,homo_trans_matr=singleAruRelPos(aruco_img,marker_points,marker_id,marker_size,)
            cv2.imshow('detected markers',aruco_img) 
        except CvBridgeError:
            print('bridge error')

        
        kk = cv2.waitKey(12) & 0xFF
        if kk == 27:
            cv2.destroyAllWindows()
            rospy.on_shutdown()
